// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projModel;

#nullable disable

namespace projModel.Migrations
{
    [DbContext(typeof(BaseballContext))]
    [Migration("20250516000350_batting_avg_fix")]
    partial class batting_avg_fix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("projModel.BaseballTeamsUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("projModel.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("projModel.Pitcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Balks")
                        .HasColumnType("int")
                        .HasColumnName("balks");

                    b.Property<int>("Blown_Saves")
                        .HasColumnType("int")
                        .HasColumnName("blown_saves");

                    b.Property<int>("Complete_Games")
                        .HasColumnType("int")
                        .HasColumnName("complete_games");

                    b.Property<decimal>("ERA")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("era");

                    b.Property<int>("Earned_Runs")
                        .HasColumnType("int")
                        .HasColumnName("earned_runs");

                    b.Property<int>("Games_Played")
                        .HasColumnType("int")
                        .HasColumnName("games_played");

                    b.Property<int>("Games_Started")
                        .HasColumnType("int")
                        .HasColumnName("games_started");

                    b.Property<int>("HBP")
                        .HasColumnType("int")
                        .HasColumnName("hbp");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.Property<int>("Holds")
                        .HasColumnType("int")
                        .HasColumnName("holds");

                    b.Property<int>("Home_Runs")
                        .HasColumnType("int")
                        .HasColumnName("home_runs");

                    b.Property<decimal>("Innings_Pitched")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("innings_pitched");

                    b.Property<int>("Intentional_Walks")
                        .HasColumnType("int")
                        .HasColumnName("intentional_walks");

                    b.Property<int>("Losses")
                        .HasColumnType("int")
                        .HasColumnName("losses");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("Quality_Starts")
                        .HasColumnType("int")
                        .HasColumnName("quality_starts");

                    b.Property<int>("Runs")
                        .HasColumnType("int")
                        .HasColumnName("runs");

                    b.Property<int>("Saves")
                        .HasColumnType("int")
                        .HasColumnName("saves");

                    b.Property<int>("Shutouts")
                        .HasColumnType("int")
                        .HasColumnName("shutouts");

                    b.Property<int>("Strikeouts")
                        .HasColumnType("int")
                        .HasColumnName("strikeouts");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("teamid");

                    b.Property<int>("Total_Batters_Faced")
                        .HasColumnType("int")
                        .HasColumnName("total_batters_faced");

                    b.Property<int>("Walks")
                        .HasColumnType("int")
                        .HasColumnName("walks");

                    b.Property<int>("Wild_Pitches")
                        .HasColumnType("int")
                        .HasColumnName("wild_pitches");

                    b.Property<int>("Wins")
                        .HasColumnType("int")
                        .HasColumnName("wins");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Pitcher");
                });

            modelBuilder.Entity("projModel.Position_Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("At_Bats")
                        .HasColumnType("int")
                        .HasColumnName("at_bats");

                    b.Property<decimal>("Batting_Average")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("batting_average");

                    b.Property<int>("Caught_Stealing")
                        .HasColumnType("int")
                        .HasColumnName("caught_stealing");

                    b.Property<int>("Doubles")
                        .HasColumnType("int")
                        .HasColumnName("doubles");

                    b.Property<int>("GDP")
                        .HasColumnType("int")
                        .HasColumnName("gdp");

                    b.Property<int>("Games_Played")
                        .HasColumnType("int")
                        .HasColumnName("games_played");

                    b.Property<int>("HBP")
                        .HasColumnType("int")
                        .HasColumnName("hbp");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.Property<int>("Home_Runs")
                        .HasColumnType("int")
                        .HasColumnName("home_runs");

                    b.Property<int>("Intentional_Walks")
                        .HasColumnType("int")
                        .HasColumnName("intentional_walks");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("Plate_Appearances")
                        .HasColumnType("int")
                        .HasColumnName("plate_appearances");

                    b.Property<int>("RBI")
                        .HasColumnType("int")
                        .HasColumnName("rbi");

                    b.Property<int>("Runs_Scored")
                        .HasColumnType("int")
                        .HasColumnName("runs_scored");

                    b.Property<int>("Sac_Fly")
                        .HasColumnType("int")
                        .HasColumnName("sac_fly");

                    b.Property<int>("Sac_Hit")
                        .HasColumnType("int")
                        .HasColumnName("sac_hit");

                    b.Property<int>("Singles")
                        .HasColumnType("int")
                        .HasColumnName("singles");

                    b.Property<int>("Stolen_Bases")
                        .HasColumnType("int")
                        .HasColumnName("stolen_bases");

                    b.Property<int>("Strikeouts")
                        .HasColumnType("int")
                        .HasColumnName("strikeouts");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("teamid");

                    b.Property<int>("Triples")
                        .HasColumnType("int")
                        .HasColumnName("triples");

                    b.Property<int>("Walks")
                        .HasColumnType("int")
                        .HasColumnName("walks");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Position_Player");
                });

            modelBuilder.Entity("projModel.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DivisionId")
                        .HasColumnType("int")
                        .HasColumnName("divisionid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("projModel.BaseballTeamsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("projModel.BaseballTeamsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projModel.BaseballTeamsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("projModel.BaseballTeamsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projModel.Pitcher", b =>
                {
                    b.HasOne("projModel.Team", "Team")
                        .WithMany("Pitchers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("projModel.Position_Player", b =>
                {
                    b.HasOne("projModel.Team", "Team")
                        .WithMany("Position_Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("projModel.Team", b =>
                {
                    b.HasOne("projModel.Division", "Division")
                        .WithMany("Teams")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("projModel.Division", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("projModel.Team", b =>
                {
                    b.Navigation("Pitchers");

                    b.Navigation("Position_Players");
                });
#pragma warning restore 612, 618
        }
    }
}
